# Generated by Django 5.0.1 on 2024-04-02 04:26

import apps.profile.validators
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("general", "0002_alter_specialist_specialization_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "phone_number",
                    models.TextField(
                        blank=True,
                        max_length=12,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Телефон может содержать: цифры, спецсимволы, длина не должна превышать 12 символов",
                                regex="^\\+7\\(\\d{3}\\)\\d{3}-\\d{2}-\\d{2}$",
                            )
                        ],
                        verbose_name="Номер телефона",
                    ),
                ),
                (
                    "telegram_nick",
                    models.CharField(
                        blank=True,
                        max_length=32,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                limit_value=5,
                                message="Длина поля от 5 до 32 символов.",
                            ),
                            django.core.validators.RegexValidator(
                                message="Введите корректное имя пользователя. Оно может состоять из латинских букв, цифр и символа подчеркивания.",
                                regex="^[a-zA-Z0-9_]+$",
                            ),
                        ],
                        verbose_name="Ник в телеграм",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=256, verbose_name="E-mail"
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        upload_to="images/",
                        validators=[apps.profile.validators.validate_image],
                        verbose_name="Аватар",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=30,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Введите кириллицу или латиницу",
                                regex="^[a-zA-Zа-яА-Я -]+$",
                            ),
                            django.core.validators.MinLengthValidator(
                                limit_value=2,
                                message="Должно быть минимум символов",
                            ),
                        ],
                        verbose_name="Имя",
                    ),
                ),
                (
                    "about",
                    models.TextField(
                        blank=True,
                        max_length=750,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Введите кириллицу или латиницу",
                                regex="^[a-zA-Zа-яА-Я0-9\\s!@#$%^&*()-_+=<>?]+$",
                            ),
                            django.core.validators.MinLengthValidator(
                                limit_value=50
                            ),
                        ],
                        verbose_name="О себе",
                    ),
                ),
                (
                    "portfolio_link",
                    models.URLField(
                        blank=True,
                        max_length=256,
                        validators=[
                            django.core.validators.URLValidator(
                                message="Введите корректный URL"
                            ),
                            django.core.validators.MinLengthValidator(
                                limit_value=5
                            ),
                        ],
                    ),
                ),
                (
                    "birthday",
                    models.DateField(
                        null=True,
                        validators=[apps.profile.validators.BirthdayValidator],
                        verbose_name="Дата рождения",
                    ),
                ),
                (
                    "country",
                    models.CharField(max_length=255, verbose_name="Страна"),
                ),
                (
                    "city",
                    models.CharField(max_length=255, verbose_name="Город"),
                ),
                (
                    "level",
                    models.IntegerField(
                        choices=[
                            (1, "intern"),
                            (2, "junior"),
                            (3, "middle"),
                            (4, "senior"),
                            (5, "lead"),
                        ],
                        null=True,
                        verbose_name="Уровень квалификации",
                    ),
                ),
                (
                    "ready_to_participate",
                    models.BooleanField(
                        choices=[(True, "Готов"), (False, "Не готов")],
                        null=True,
                        verbose_name="Готовность к участию в проектах",
                    ),
                ),
                (
                    "visible_status",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "All"),
                            (2, "Only creator"),
                            (3, "Nobody"),
                        ],
                        default=1,
                        verbose_name="Видимость",
                    ),
                ),
                (
                    "visible_status_contacts",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "All"),
                            (2, "Only creator"),
                            (3, "Nobody"),
                        ],
                        default=1,
                        verbose_name="Видимость контактов",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserSkill",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="profile.profile",
                    ),
                ),
                (
                    "skill",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="general.skill",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Навык пользователя",
                "default_related_name": "userskills",
            },
        ),
        migrations.CreateModel(
            name="UserSpecialization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="profile.profile",
                    ),
                ),
                (
                    "specialization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="general.specialist",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Специализация пользователя",
                "default_related_name": "userspecialization",
            },
        ),
        migrations.AddConstraint(
            model_name="userskill",
            constraint=models.UniqueConstraint(
                fields=("user", "skill"),
                name="profile_userskill_unique_skill_per_user",
            ),
        ),
        migrations.AddConstraint(
            model_name="userspecialization",
            constraint=models.UniqueConstraint(
                fields=("user", "specialization"),
                name="profile_userspecialization_unique_specialization_per_user",
            ),
        ),
    ]
