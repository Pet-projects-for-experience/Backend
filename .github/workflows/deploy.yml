name: Codepet deploy from Develop

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Extract branch name
      id: extract_branch
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        BRANCH_NAME=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]')
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: Create project directory and .env-file
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets[format('HOST_{0}', inputs.environment)] }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          sudo rm -r ${{ secrets.PROJECT_NAME }}
          sudo mkdir -p ${{ secrets.PROJECT_NAME }}/infra
          sudo chmod 777 ${{ secrets.PROJECT_NAME }}/infra
          if [ "${{ inputs.environment }}" = "dev" ]; then
          sudo cat > ${{ secrets.PROJECT_NAME }}/infra/.env << _EOF_
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            PROJECT_NAME=${{ secrets.PROJECT_NAME }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
            NGINX_NAME=${{ secrets.NGINX_NAME }}
            EMAIL_HOST=${{ secrets.EMAIL_HOST }}
            EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
            EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
            NEXT_PUBLIC_CAPTCHA_SITE_KEY=${{ secrets.NEXT_PUBLIC_CAPTCHA_SITE_KEY }}
            NEXT_SHARP_PATH=${{ secrets.NEXT_SHARP_PATH }}
            BACKEND_LOGS_DIR=${{ secrets.BACKEND_LOGS_DIR }}
            BRANCH_TAG=${{ steps.extract_branch.outputs.branch_name }}
            SERVER_NAME=${{ secrets.SERVER_NAME_DEV }}
            SERVER_HOST=${{ secrets.SERVER_HOST_DEV }}
          _EOF_
          else
          sudo cat > ${{ secrets.PROJECT_NAME }}/infra/.env << _EOF_
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            PROJECT_NAME=${{ secrets.PROJECT_NAME }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DOCKERHUB_USERNAME_FRONT=${{ secrets.DOCKERHUB_USERNAME_FRONT }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS_QA }}
            NGINX_NAME=${{ secrets.NGINX_NAME }}
            EMAIL_HOST=${{ secrets.EMAIL_HOST }}
            EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
            EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
            NEXT_PUBLIC_CAPTCHA_SITE_KEY=${{ secrets.NEXT_PUBLIC_CAPTCHA_SITE_KEY }}
            NEXT_SHARP_PATH=${{ secrets.NEXT_SHARP_PATH }}
            BACKEND_LOGS_DIR=${{ secrets.BACKEND_LOGS_DIR }}
            BRANCH_TAG=${{ github.ref_name }}
            SERVER_NAME=${{ secrets.SERVER_NAME_QA }}
            SERVER_HOST=${{ secrets.SERVER_HOST_QA }}
          _EOF_
          fi
    - name: Copy docker-compose-dev.yaml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets[format('HOST_{0}', inputs.environment)] }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "infra/docker-compose-dev.yaml"
        target: "codepet"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets[format('HOST_{0}', inputs.environment)] }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd codepet/infra
          sudo docker compose -f docker-compose-dev.yaml pull
          sudo docker compose -f docker-compose-dev.yaml down
          sudo docker compose -f docker-compose-dev.yaml up -d
          sudo docker compose -f docker-compose-dev.yaml exec backend python manage.py migrate
          sudo docker compose -f docker-compose-dev.yaml exec backend python manage.py collectstatic --no-input
          sudo docker compose -f docker-compose-dev.yaml exec backend cp -r static/. /backend_static/static/
          sudo docker system prune -f
